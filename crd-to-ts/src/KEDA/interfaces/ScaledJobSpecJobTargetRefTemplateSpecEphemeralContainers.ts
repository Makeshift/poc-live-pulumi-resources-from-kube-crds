// @ts-nocheck
/**
 * 
 * 
 *
 * The version of the OpenAPI document: 
 * Contact Email: 
 * License: 
 *
 * NOTE: This file is auto generated by crdtotypes (https://github.com/yaacov/crdtoapi/).
 * https://github.com/yaacov/crdtoapi/README.crdtotypes
 */

import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersEnv } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersEnv';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersEnvFrom } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersEnvFrom';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersLifecycle } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersLifecycle';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersLivenessProbe } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersLivenessProbe';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersPorts } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersPorts';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersReadinessProbe } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersReadinessProbe';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersResizePolicy } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersResizePolicy';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersResources } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersResources';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersSecurityContext } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersSecurityContext';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersStartupProbe } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersStartupProbe';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersVolumeDevices } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersVolumeDevices';
import { ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersVolumeMounts } from './ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersVolumeMounts';

/**
 * An EphemeralContainer is a temporary container that you may add to an existing Pod for
user-initiated activities such as debugging. Ephemeral containers have no resource or
scheduling guarantees, and they will not be restarted when they exit or when a Pod is
removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
Pod to exceed its resource allocation.


To add an ephemeral container, use the ephemeralcontainers subresource of an existing
Pod. Ephemeral containers may not be removed or restarted.
 *
 * @export
 */
export interface ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainers {
  /** args
   *
   * @required {false}
   */
  args?: string[];
  /** command
   *
   * @required {false}
   */
  command?: string[];
  /** env
   * EnvVar represents an environment variable present in a Container.
   *
   * @required {false}
   */
  env?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersEnv[];
  /** envFrom
   * EnvFromSource represents the source of a set of ConfigMaps
   *
   * @required {false}
   */
  envFrom?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersEnvFrom[];
  /** image
   * Container image name.
More info: https://kubernetes.io/docs/concepts/containers/images
   *
   * @required {false}
   */
  image?: string;
  /** imagePullPolicy
   * Image pull policy.
One of Always, Never, IfNotPresent.
Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   *
   * @required {false}
   */
  imagePullPolicy?: string;
  /** lifecycle
   * Lifecycle is not allowed for ephemeral containers.
   *
   * @required {false}
   */
  lifecycle?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersLifecycle;
  /** livenessProbe
   * Probes are not allowed for ephemeral containers.
   *
   * @required {false}
   */
  livenessProbe?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersLivenessProbe;
  /** name
   * Name of the ephemeral container specified as a DNS_LABEL.
This name must be unique among all containers, init containers and ephemeral containers.
   *
   * @required {true}
   */
  name: string;
  /** ports
   * ContainerPort represents a network port in a single container.
   *
   * @required {false}
   */
  ports?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersPorts[];
  /** readinessProbe
   * Probes are not allowed for ephemeral containers.
   *
   * @required {false}
   */
  readinessProbe?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersReadinessProbe;
  /** resizePolicy
   * ContainerResizePolicy represents resource resize policy for the container.
   *
   * @required {false}
   */
  resizePolicy?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersResizePolicy[];
  /** resources
   * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
already allocated to the pod.
   *
   * @required {false}
   */
  resources?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersResources;
  /** restartPolicy
   * Restart policy for the container to manage the restart behavior of each
container within a pod.
This may only be set for init containers. You cannot set this field on
ephemeral containers.
   *
   * @required {false}
   */
  restartPolicy?: string;
  /** securityContext
   * Optional: SecurityContext defines the security options the ephemeral container should be run with.
If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
   *
   * @required {false}
   */
  securityContext?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersSecurityContext;
  /** startupProbe
   * Probes are not allowed for ephemeral containers.
   *
   * @required {false}
   */
  startupProbe?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersStartupProbe;
  /** stdin
   * Whether this container should allocate a buffer for stdin in the container runtime. If this
is not set, reads from stdin in the container will always result in EOF.
Default is false.
   *
   * @required {false}
   */
  stdin?: boolean;
  /** stdinOnce
   * Whether the container runtime should close the stdin channel after it has been opened by
a single attach. When stdin is true the stdin stream will remain open across multiple attach
sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
first client attaches to stdin, and then remains open and accepts data until the client disconnects,
at which time stdin is closed and remains closed until the container is restarted. If this
flag is false, a container processes that reads from stdin will never receive an EOF.
Default is false
   *
   * @required {false}
   */
  stdinOnce?: boolean;
  /** targetContainerName
   * If set, the name of the container from PodSpec that this ephemeral container targets.
The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
If not set then the ephemeral container uses the namespaces configured in the Pod spec.


The container runtime must implement support for this feature. If the runtime does not
support namespace targeting then the result of setting this field is undefined.
   *
   * @required {false}
   */
  targetContainerName?: string;
  /** terminationMessagePath
   * Optional: Path at which the file to which the container's termination message
will be written is mounted into the container's filesystem.
Message written is intended to be brief final status, such as an assertion failure message.
Will be truncated by the node if greater than 4096 bytes. The total message length across
all containers will be limited to 12kb.
Defaults to /dev/termination-log.
Cannot be updated.
   *
   * @required {false}
   */
  terminationMessagePath?: string;
  /** terminationMessagePolicy
   * Indicate how the termination message should be populated. File will use the contents of
terminationMessagePath to populate the container status message on both success and failure.
FallbackToLogsOnError will use the last chunk of container log output if the termination
message file is empty and the container exited with an error.
The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
Defaults to File.
Cannot be updated.
   *
   * @required {false}
   */
  terminationMessagePolicy?: string;
  /** tty
   * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
Default is false.
   *
   * @required {false}
   */
  tty?: boolean;
  /** volumeDevices
   * volumeDevice describes a mapping of a raw block device within a container.
   *
   * @required {false}
   */
  volumeDevices?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersVolumeDevices[];
  /** volumeMounts
   * VolumeMount describes a mounting of a Volume within a container.
   *
   * @required {false}
   */
  volumeMounts?: ScaledJobSpecJobTargetRefTemplateSpecEphemeralContainersVolumeMounts[];
  /** workingDir
   * Container's working directory.
If not specified, the container runtime's default will be used, which
might be configured in the container image.
Cannot be updated.
   *
   * @required {false}
   */
  workingDir?: string;
}
